 SQLBolt

Exercise 1 — Tasks
SELECT title FROM movies;
SELECT director FROM movies;
SELECT title, director FROM movies;
SELECT title,year FROM movies;
SELECT * FROM movies;


Exercise 2 — Tasks
SELECT * FROM movies where id=6;
SELECT * FROM movies WHERE year BETWEEN 2000 AND 2010;
SELECT * FROM movies WHERE not year BETWEEN 2000 AND 2010;
SELECT * FROM movies WHERE year LIMIT 5


Exercise 3 — Tasks
SELECT * FROM movies where title like "Toy Story%";
SELECT * FROM movies where director like "John%";
SELECT * FROM movies where not director like "John%";
SELECT * FROM movies where title like "wall%";


Exercise 4 — Tasks
SELECT DISTINCT director FROM movies ORDER BY director;
SELECT DISTINCT title FROM movies ORDER BY year DESC LIMIT 4;
SELECT title FROM movies ORDER BY title LIMIT 5;
SELECT title FROM movies ORDER BY title LIMIT 5 OFFSET 5;




Exercise 5 — Tasks
SELECT city,population FROM north_american_cities WHERE country ="Canada;
SELECT city FROM north_american_cities WHERE country = "United States" ORDER BY latitude DESC;
SELECT city FROM north_american_cities WHERE longitude < -87.629798 ORDER BY longitude;
SELECT city FROM north_american_cities WHERE country = "Mexico" ORDER BY population DESC LIMIT 2;
SELECT city FROM north_american_cities WHERE country = "United States"
ORDER BY population DESC LIMIT 2 OFFSET 2;

Exercise 6 — Tasks
SELECT title, domestic_sales, international_sales FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id;
SELECT title, domestic_sales, international_sales FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id WHERE international_sales > domestic_sales;
SELECT title, rating FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id ORDER BY rating DESC;

Exercise 7 — Tasks
SELECT DISTINCT building FROM employees;
SELECT * FROM Buildings;
SELECT DISTINCT building_name, role FROM buildings LEFT JOIN employees ON building_name = employees.building;

Exercise 8 — Tasks
SELECT name, role FROM employees WHERE building IS NULL;
SELECT DISTINCT building_name FROM buildings LEFT JOIN employees ON building_name = employees.building WHERE employees.building IS NULL;


Exercise 9 — Tasks
SELECT DISTINCT title, (domestic_sales + international_sales)/1000000 AS sales FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id;
SELECT DISTINCT title, (rating * 10) AS rate_percent FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id;
SELECT title FROM movies WHERE year % 2 = 0;

Exercise 10— Tasks
SELECT name, MAX(years_employed) FROM employees;
SELECT role, AVG(years_employed) as Average_years_employed FROM employees GROUP BY role;
SELECT building, SUM(years_employed) FROM employees GROUP BY building

Exercise 11— Tasks
SELECT COUNT(*) FROM employees WHERE role LIKE 'artist';
SELECT role, COUNT(name) FROM employees GROUP BY role;
SELECT role, SUM(years_employed) FROM employees GROUP BY role HAVING role LIKE 'engineer';

Exercise 12— Tasks
SELECT director, COUNT(*) FROM movies GROUP BY director;
SELECT director, SUM(domestic_sales) + SUM(international_sales) AS Total FROM movies LEFT JOIN boxoffice ON movies.id = boxoffice.movie_id GROUP BY director;

Exercise 13— Tasks
INSERT INTO movies (id, title, director, year, length_minutes) VALUES (15, "Toy Story 4", "John Lasseter", 2017, 110 );
INSERT INTO boxoffice (movie_id, rating, domestic_sales, international_sales) VALUES (15, 8.7, 340000000 , 270000000);

Exercise 14— Tasks
UPDATE movies SET director = "John Lasseter" WHERE title = "A Bug's Life";
UPDATE movies SET year = 1999 WHERE title = "Toy Story 2";
UPDATE movies SET director = "Lee Unkrich", title = "Toy Story 3" WHERE title = "Toy Story 8";

Exercise 15— Tasks
DELETE FROM movies WHERE year < 2005;
DELETE FROM movies WHERE director = "Andrew Stanton";

Exercise 16— Tasks
CREATE TABLE database (id INTEGER PRIMARY KEY, name TEXT, version FLOAT, download_count INTEGER );

Exercise 17— Tasks
ALTER TABLE movies ADD aspect_ratio FLOAT;
ALTER TABLE movies ADD language TEXT DEFAULT "English";

Exercise 18— Tasks
DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS boxoffice;

